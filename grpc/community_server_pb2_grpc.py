# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import community_server_pb2 as community__server__pb2
import registry_server_pb2 as registry__server__pb2


class ClientManagementStub(object):
    """/ Join and leaving server"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
            "/ClientManagement/JoinServer",
            request_serializer=registry__server__pb2.Client_information.SerializeToString,
            response_deserializer=registry__server__pb2.Success.FromString,
        )
        self.LeaveServer = channel.unary_unary(
            "/ClientManagement/LeaveServer",
            request_serializer=registry__server__pb2.Client_information.SerializeToString,
            response_deserializer=registry__server__pb2.Success.FromString,
        )
        self.GetArticles = channel.unary_unary(
            "/ClientManagement/GetArticles",
            request_serializer=community__server__pb2.ArticleRequestFormat.SerializeToString,
            response_deserializer=community__server__pb2.ArticleList.FromString,
        )


class ClientManagementServicer(object):
    """/ Join and leaving server"""

    def JoinServer(self, request, context):
        """/ Join server based on uuid"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LeaveServer(self, request, context):
        """/ Leave server based on uuid"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetArticles(self, request, context):
        """/ Get articles for uuid"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ClientManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "JoinServer": grpc.unary_unary_rpc_method_handler(
            servicer.JoinServer,
            request_deserializer=registry__server__pb2.Client_information.FromString,
            response_serializer=registry__server__pb2.Success.SerializeToString,
        ),
        "LeaveServer": grpc.unary_unary_rpc_method_handler(
            servicer.LeaveServer,
            request_deserializer=registry__server__pb2.Client_information.FromString,
            response_serializer=registry__server__pb2.Success.SerializeToString,
        ),
        "GetArticles": grpc.unary_unary_rpc_method_handler(
            servicer.GetArticles,
            request_deserializer=community__server__pb2.ArticleRequestFormat.FromString,
            response_serializer=community__server__pb2.ArticleList.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ClientManagement", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ClientManagement(object):
    """/ Join and leaving server"""

    @staticmethod
    def JoinServer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClientManagement/JoinServer",
            registry__server__pb2.Client_information.SerializeToString,
            registry__server__pb2.Success.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def LeaveServer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClientManagement/LeaveServer",
            registry__server__pb2.Client_information.SerializeToString,
            registry__server__pb2.Success.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetArticles(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ClientManagement/GetArticles",
            community__server__pb2.ArticleRequestFormat.SerializeToString,
            community__server__pb2.ArticleList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
