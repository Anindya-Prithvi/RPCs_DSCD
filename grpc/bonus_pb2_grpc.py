# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import community_server_pb2 as community__server__pb2
import registry_server_pb2 as registry__server__pb2


class ServerServerManagementStub(object):
    """/ Join and leaving server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/ServerServerManagement/JoinServer',
                request_serializer=registry__server__pb2.Server_information.SerializeToString,
                response_deserializer=community__server__pb2.ArticleList.FromString,
                )
        self.LeaveServer = channel.unary_unary(
                '/ServerServerManagement/LeaveServer',
                request_serializer=registry__server__pb2.Server_information.SerializeToString,
                response_deserializer=registry__server__pb2.Success.FromString,
                )
        self.DumpArticles = channel.unary_unary(
                '/ServerServerManagement/DumpArticles',
                request_serializer=community__server__pb2.Article.SerializeToString,
                response_deserializer=registry__server__pb2.Success.FromString,
                )


class ServerServerManagementServicer(object):
    """/ Join and leaving server
    """

    def JoinServer(self, request, context):
        """/ Join server based on ip:port (kinda insecure)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveServer(self, request, context):
        """/ Leave server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DumpArticles(self, request, context):
        """/ Dumps article to client whenever someone publishes (inefficient but idc)
        / lists are threadsafe in py; if Article not in list, dump further
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServerManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=registry__server__pb2.Server_information.FromString,
                    response_serializer=community__server__pb2.ArticleList.SerializeToString,
            ),
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=registry__server__pb2.Server_information.FromString,
                    response_serializer=registry__server__pb2.Success.SerializeToString,
            ),
            'DumpArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.DumpArticles,
                    request_deserializer=community__server__pb2.Article.FromString,
                    response_serializer=registry__server__pb2.Success.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerServerManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerServerManagement(object):
    """/ Join and leaving server
    """

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServerManagement/JoinServer',
            registry__server__pb2.Server_information.SerializeToString,
            community__server__pb2.ArticleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServerManagement/LeaveServer',
            registry__server__pb2.Server_information.SerializeToString,
            registry__server__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DumpArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServerManagement/DumpArticles',
            community__server__pb2.Article.SerializeToString,
            registry__server__pb2.Success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
