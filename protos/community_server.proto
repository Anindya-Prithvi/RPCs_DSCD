syntax = "proto3";
import "registry_server.proto";

/// Join and leaving server
service ClientManagement {
    /// Join server based on uuid
    rpc JoinServer (Client_information) returns (Success);
    /// Leave server based on uuid
    rpc LeaveServer (Client_information) returns (Success);
    /// Get articles for uuid
    rpc GetArticles (ArticleRequestFormat) returns (ArticleList);
    /// Publish article supplied by uuid
    rpc PublishArticle (ArticleRequestFormat) returns (Success);
}

/// List of currently connected clients
message Clientele {
    /// List of currently connected clients
    repeated Client_information clients = 1;
}

/// Full article message
message Article {
    /// Type of article
    enum type {
        /// Article is SPORTS
        SPORTS = 0;
        /// Article is FASHION
        FASHION = 1;
        /// Article is POLITICS
        POLITICS = 2;        
    }
    
    oneof _type {
        type article_type = 1;
    }
    /// Author of the article (name)
    optional string author = 2;
    /// Timestamp of publication
    optional int64 time = 3;
    /// 200 char string
    optional string content = 4;
}

/// Like a book of articles
message ArticleList {
    /// List of all articles
    repeated Article articles = 1;
}

/// Request and publish format
message ArticleRequestFormat {
    /// Client uuid
    optional Client_information client = 1;

    /// Unnecessary usage of oneof, imo enum should suffice
    /// Contains the types of articles
    optional Article article = 2;
}

/// As long as optional and 1 byte is enough, this is fine
